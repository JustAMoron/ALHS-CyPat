# Set password policy settings
$passwordPolicy = @{
    "PasswordHistoryCount" = 24
    "MaxPasswordAge" = (New-TimeSpan -Days 60).TotalSeconds
    "MinPasswordAge" = (New-TimeSpan -Days 1).TotalSeconds
    "MinPasswordLength" = 10
    "PasswordComplexity" = 1
    "ClearTextPassword" = 0
}

# Set lockout policy settings
$lockoutPolicy = @{
    "LockoutDuration" = (New-TimeSpan -Minutes 30).TotalSeconds
    "LockoutThreshold" = 10
    "ResetLockoutCounterAfter" = (New-TimeSpan -Minutes 30).TotalSeconds
}

# Configure password policy using secedit
$seceditTemplate = @"
[Unicode]
Unicode=yes
[Version]
signature="$CHICAGO$"
Revision=1
[Profile Description]
Description=This policy configures security settings for a User.
[System Access]
MinimumPasswordLength = $($passwordPolicy["MinPasswordLength"])
[Event Audit]
[Event Audit\Account Logon]
[Event Audit\Account Logon\Audit Credential Validation]
"@

# Apply the password policy settings
$seceditTemplate | Out-File -FilePath "$env:TEMP\Secedit.inf" -Encoding Unicode
secedit.exe /configure /db c:\windows\security\local.sdb /cfg "$env:TEMP\Secedit.inf"

Write-Host "Password policy has been configured."

# Set lockout policy settings
$lockoutPolicy | ForEach-Object {
    Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Services\MSWinloc" -Name $_.Key -Value $_.Value
}

Write-Host "Lockout policy has been configured."

# List of authorized users
$authorizedUsers = @("AuthorizedUser1", "AuthorizedUser2", "AuthorizedUser3")

# Get all users and compare with authorized users
$allUsers = Get-ADUser -Filter *
foreach ($user in $allUsers) {
    $username = $user.SamAccountName
    if (-not $authorizedUsers.Contains($username)) {
        Disable-ADAccount -Identity $username
        Write-Host "Disabled account for unauthorized user: $username"
    }
}

# Use SmartScreen online services (Security and Maintenance) = ON
Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value 1

# Wi-Fi Sense settings
# Automatically connect to suggested open hotspots = OFF
# Automatically connect to hotspots temporarily to see if paid network services are available = OFF
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WcmSvc\wifinetworkmanager\config" -Name "AutoConnectToPaidHotspots" -Value 0
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WcmSvc\wifinetworkmanager\config" -Name "AutoConnectToOpenHotspots" -Value 0

# Turn UAC to max (Change User Account Control Settings)
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 5

# Change Adapter settings
# Disable the specified services
$servicesToDisable = @(
    "Client for Microsoft Networks",
    "File and Printer Sharing for Microsoft Networks",
    "QoS Packet Scheduler",
    "Microsoft Network Adapter Multiplexor Protocol",
    "Microsoft LLDP Protocol Driver",
    "Link-Layer Topology Discovery Mapper I/O Driver",
    "Link-Layer Topology Discovery Responder"
)

foreach ($service in $servicesToDisable) {
    Disable-NetAdapterBinding -Name "*" -ComponentID $service -Confirm:$false
}

# Disable Internet Protocol version 6
Disable-NetAdapterBinding -Name "*" -ComponentID "ms_tcpip6"

# Disable 'Register this connection's address in DNS' for IPv4
Set-DnsClient -InterfaceIndex (Get-NetAdapter | Where-Object { $_.Status -eq "Up" }).InterfaceIndex -RegisterThisConnectionsAddress 0

# Disable NETBIOS over TCP/IP on WINS tab for IPv4
Set-WmiInstance -Class Win32_NetworkAdapterConfiguration -Filter "IPEnabled='True'" -Property @{WINSResolution=2}

# Disable port 1900 UPnP
$regPath = "HKLM:\Software\Microsoft\DirectplayNATHelp\DPNHUPnP"
$regName = "UPnPMode"
$regValue = 2

# Create a new DWORD value
New-ItemProperty -Path $regPath -Name $regName -Value $regValue -PropertyType DWord -Force

# Stop and disable Windows services
$servicesToConfigure = @{
    "upnphost" = @{Status = "Stopped"; StartupType = "Disabled"},
    "TermService" = @{Status = "DependsOnREADME"; StartupType = "Manual"},
    "Telnet" = @{Status = "Stopped"; StartupType = "Disabled"},
    "SNMPTRAP" = @{Status = "Stopped"; StartupType = "Disabled"},
    "Wecsvc" = @{Status = "Running"; StartupType = "Automatic"},
    "RemoteRegistry" = @{Status = "Stopped"; StartupType = "Disabled"}
}

foreach ($service in $servicesToConfigure.GetEnumerator()) {
    $serviceName = $service.Key
    $status = $service.Value.Status
    $startupType = $service.Value.StartupType

    # Stop the service
    Stop-Service -Name $serviceName -Force -ErrorAction SilentlyContinue

    # Set the startup type
    Set-Service -Name $serviceName -StartupType $startupType -ErrorAction SilentlyContinue

    # If the service is set to "Running," start the service
    if ($status -eq "Running") {
        Start-Service -Name $serviceName -ErrorAction SilentlyContinue
    }
}

# Check Windows features
$featuresToDisable = @(
    "TelnetClient",
    "TelnetServer",
    "SNMP",
    "RIP Listener",
    "NFS-Client",
    "IIS-WebServer",
    "IIS-WorldWideWebServices",
    "TFTP-Client"
)

foreach ($feature in $featuresToDisable) {
    Disable-WindowsOptionalFeature -Online -FeatureName $feature -NoRestart
}

# Disable SMB v1
Disable-WindowsOptionalFeature -Online -FeatureName SMB1Protocol -NoRestart

# Only share specific folders
$allowedShares = @("ADMIN$", "C$", "IPC$")

# Remove existing shares not in the allowed list
Get-SmbShare | Where-Object { $_.Name -notin $allowedShares } | Remove-SmbShare -Force

# Firewall rules
$rulesToDisable = @(
    "MicrosoftEdge",
    "CortanaListenUIApp",
    "BingWeather",
    "Microsoft.Xbox.App"
)

foreach ($rule in $rulesToDisable) {
    Disable-NetFirewallRule -DisplayName $rule
}

# Turning off Tiles
# The script doesn't directly interact with the Start menu, as this is more user-specific.
# You may guide the user to manually turn off Tiles by right-clicking on them.

# Turn off AutoPlay
Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers" -Name "DisableAutoplay" -Value 1

# Run the command "netplwiz"
Start-Process "netplwiz" -Verb RunAs

# Disable OneDrive on Startup
# Using msconfig.exe to disable OneDrive on startup
$msconfigPath = "C:\Windows\System32\msconfig.exe"
Start-Process $msconfigPath -ArgumentList "/startup" -Verb RunAs

# Screen Saver settings
# Set screen saver settings to wait for 10 minutes and display logon screen on resume
# Note: The script assumes that the registry key path and values are consistent across Windows versions.
$screenSaverPath = "HKCU:\Control Panel\Desktop"
Set-ItemProperty -Path $screenSaverPath -Name ScreenSaveActive -Value 1
Set-ItemProperty -Path $screenSaverPath -Name ScreenSaveTimeOut -Value 600
Set-ItemProperty -Path $screenSaverPath -Name ScreenSaverIsSecure -Value 1

# Configure Auditing
# Enable auditing for success and failure events
$auditPolicy = @{
    "AuditPolicyObject" = 1
    "AuditSystemEvents" = 1
    "AuditLogonEvents" = 3
    "AuditObjectAccess" = 3
    "AuditPrivilegeUse" = 3
    "AuditPolicyChange" = 3
    "AuditAccountManage" = 3
    "AuditProcessTracking" = 3
    "AuditDSAccess" = 3
    "AuditAccountLogon" = 3
}
Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\eventlog\Security" -Name $auditPolicy

# Turn on Windows Defender
# Check if Windows Defender is disabled
$defenderStatus = Get-MpPreference | Select-Object -ExpandProperty DisableRealtimeMonitoring

if ($defenderStatus -eq $true) {
    # Windows Defender is disabled, let's enable it using Group Policy

    # Check if Group Policy module is available
    if (Get-Module -ListAvailable -Name GroupPolicy -ErrorAction SilentlyContinue) {
        # Import the Group Policy module
        Import-Module GroupPolicy

        # Set the registry key to enable Windows Defender
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name "DisableAntiSpyware" -Value 0

        # Force Group Policy update
        gpupdate /force

        Write-Host "Windows Defender has been enabled."
    } else {
        Write-Host "Group Policy module not found. Please run the script with administrative privileges."
    }
} else {
    Write-Host "Windows Defender is already enabled."
}

Write-Host "Configuration tasks completed."
